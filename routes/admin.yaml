components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: User's username
        password:
          type: string
          description: User's password
          format: password
    AdminUpdate:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: User's username
        password:
          type: string
          description: User's password
          format: password
        new_password:
          type: string
          description: admin's new_password
          format: password
  responses:
    Success200:
      description: Login successful
      content:
        application/json:
          example:
            access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFkbWluIiwiaWF0IjoxNzA3ODE5MDQxLCJleHAiOjE3MDc4MTk5NDF9.jNUUmOeit18njKRihT6xZy9Ob99Xk0Iq27K36jQuo9E"
            admin:
              id: 1
              username: "admin"
    StaticPlaces200:
      description: Successful
      content:
        application/json:
          example:
            [{
              "id": 17,
              "name": "Paris, France",
              "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Paris_-_Eiffel_Tower_-_July_2019.jpg/220px-Paris_-_Eiffel_Tower_-_July_2019.jpg",
              "images": ["image1.jpg"],
              "description": "City of lights and romance, known for its Eiffel Tower, Louvre Museum, and Notre Dame Cathedral."
            }]
    StaticPlace200:
      description: Successful
      content:
        application/json:
          example:
            {
              "id": 17,
              "name": "Paris, France",
              "icon": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Paris_-_Eiffel_Tower_-_July_2019.jpg/220px-Paris_-_Eiffel_Tower_-_July_2019.jpg",
              "images": ["image1.jpg"],
              "description": "City of lights and romance, known for its Eiffel Tower, Louvre Museum, and Notre Dame Cathedral."
            }
    Error400:
      description: Bad request
      content:
        application/json:
          example:
            statusCode: 400
            message: Unexpected token } in JSON at position 54
            error: "Bad Request"

    Error401:
      description: Unauthorized
      content:
        application/json:
          example:
            statusCode: 401
            message: Unauthorized
    Forbidden403:
      description: Authentication failure
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message
                example: "Credentials incorrect"
              error:
                type: string
                description: Error code
                example: "Forbidden"
              statusCode:
                type: integer
                description: HTTP status code
                example: 403
    Error404:
      description: Not found
      content:
        application/json:
          example:
            statusCode: 404
            message: Not found
    Error500:
      description: Internal server error
      content:
        application/json:
          example:
            statusCode: 500,
            message: Internal server error

tags:
  - name: Admin
    description: Admin operations
  - name: Static_places
  - name: About us
  - name: Gallery
  - name: Trips
  - name: Tips
  - name: Public

paths:
  /admin/login:
    post:
      summary: Login user
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          $ref: "#/components/responses/Success200"
        403:
          $ref: "#/components/responses/Forbidden403"
        500:
          $ref: "#/components/responses/Error500"
  /admin:
    patch:
      tags: [Admin]
      security: 
        - bearerAuth: []
      summary: Update an admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUpdate"
      responses:
        200:
          $ref: "#/components/responses/Success200"
        401:
          $ref: "#/components/responses/Error401"
        500:
          $ref: "#/components/responses/Error500"
      # ... other operation details
  /admin/static:
    get:
      tags: [Static_places]
      security: 
        - bearerAuth: []
      summary: Get all static places
      responses:
        200:
          $ref: "#/components/responses/StaticPlaces200"
        401:
          $ref: "#/components/responses/Error401"
        500:
          $ref: "#/components/responses/Error500"
  /admin/static/{id}:
    get:
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the place.
      tags: [Static_places]
      security: 
        - bearerAuth: []
      summary: Get one place
      responses:
        200:
          $ref: "#/components/responses/StaticPlace200"
        404:
          $ref: "#/components/responses/Error404"
    patch:
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the place.
      tags: [Static_places]
      security: 
        - bearerAuth: []
      summary: Edit one place
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the entity you want to work with.
                  example: "Koytendag"
                description:
                  type: string
                  description: A detailed description of the entity.
                  example: "The best place in the world"
      responses:
        200:
          content:
            application/json:
              example: Sucess
        404:
          $ref: "#/components/responses/Error404"
        500:
          $ref: "#/components/responses/Error500"
  /admin/static/{id}/upload-image:
    post:
      security: 
        - bearerAuth: []
      summary: Upload image for place
      tags: [Static_places]
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: Unique identifier for the static resource.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: string
                  format: binary
                  description: Image file to upload.  
      responses:
        200:
          content:
            application/json:
              example: Sucess
        404:
          $ref: "#/components/responses/Error404"
        500:
          $ref: "#/components/responses/Error500"
  /admin/static/images/{id}:
    delete:
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the place.
      tags: [Static_places]
      security: 
        - bearerAuth: []
      summary: Delete one image
      responses:
        200:
          $ref: "#/components/responses/StaticPlace200"
        404:
          $ref: "#/components/responses/Error404"
  /admin/about-us:
    get:
      tags: [About us]
      security: 
        - bearerAuth: []
      summary: Get all static places
      responses:
         200:
          content:
            application/json:
              example: 
                {
                  "id": 1,
                  "header": [
                    "header"
                  ],
                  "description": [
                    "description"
                  ],
                  "images": [
                    {
                      "id": 1,
                      "image": "061c6c34-9798-4350-a6ae-06ae5255e888.webp"
                    }
                  ]
                }
    patch:
        tags: [About us]
        security: 
          - bearerAuth: []
        summary: Edit about us
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  header:
                    type: array
                    items: 
                      type: string
                    description: The name of the entity you want to work with.
                    example: [We are such a good company]
                  description:
                    type: array
                    items: 
                      type: string
                    description: A detailed description of the entity.
                    example: ["We work for people"]
        responses:
          200:
            content:
              application/json:
                example: Sucess
          400:
            $ref: "#/components/responses/Error400"
  /admin/about-us/upload-image:
    post:
      security: 
        - bearerAuth: []
      summary: Upload image for about us
      tags: [About us]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: string
                  format: binary
                  description: Image file to upload.  
      responses:
        200:
          content:
            application/json:
              example: Sucess
        400:
          $ref: "#/components/responses/Error400"
  /admin/about-us/images/{id}:
    delete:
      security: 
        - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the place.
      tags: [About us]
      responses:
        200:
          content:
            application/json:
              example: Sucess
        404:
          $ref: "#/components/responses/Error404"
  /admin/gallery:
    get:
      tags: [Gallery]
      security: 
        - bearerAuth: []
      summary: Get all gallery
      responses:
        200:
          content:
            application/json:
              example: 
                [
                  {
                      "id": 4,
                      "file": "0b992b88-2cf5-4902-972c-76a51535a748.webp",
                      "type": "image"
                  },
                  {
                      "id": 6,
                      "file": "9af5a7c9-7f5c-493e-b10e-6be8aeeaf8da.webp",
                      "type": "video"
                  }
                ]          
        401:
          $ref: "#/components/responses/Error401"
    post:
      security: 
        - bearerAuth: []
      summary: Upload image or video for gallery
      tags: [Gallery]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload.  
      responses:
        200:
          content:
            application/json:
              example: Sucess
        400:
          $ref: "#/components/responses/Error400"
        401:
          $ref: "#/components/responses/Error401"
        500:
          $ref: "#/components/responses/Error500"
  /admin/gallery/{id}:
    delete:
      security: 
        - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the place.
      tags: [Gallery]
      responses:
        200:
          content:
            application/json:
              example: Sucess
        404:
          $ref: "#/components/responses/Error404"
        500:
          $ref: "#/components/responses/Error500"
  /admin/trips:
    get:
      tags: [Trips]
      security: 
        - bearerAuth: []
      summary: Get all trips
      responses:
        200:
          content:
            application/json:
              example: 
                  [
                    {
                        "id": 3,
                        "title": "Koytendag",
                        "description": "Gowy yer"
                    }
                  ]          
        401:
          $ref: "#/components/responses/Error401"
    post:
      tags: [Trips]
      security: 
        - bearerAuth: []
      summary: Add trip
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Koytendag"
                description:
                  type: string
                  example: "The best place in the world"
      responses:
        201:
          content:
            application/json:
              example:
                {
                    "title": "Tejen",
                    "description": "Tejen description",
                    "id": 3
                }
        500:
          $ref: "#/components/responses/Error500"
  /admin/trips/{id}:
    get:
      security: 
        - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the trip.
      tags: [Trips]
      responses:
        200:
          content:
            application/json:
              example: 
                {
                  "id": 3,
                  "title": "Koytendag",
                  "description": "Gowy yer",
                  "images": [
                      {
                          "id": 9,
                          "image": "60d90458-0b3f-4c16-b35c-3f598f6feaad.webp"
                      },
                      {
                          "id": 10,
                          "image": "e59093db-6c45-4168-8d36-8b0fde4f136e.webp"
                      }
                  ]
                }
        404:
          $ref: "#/components/responses/Error404"
        500:
          $ref: "#/components/responses/Error500"
    patch:
      tags: [Trips]
      security: 
        - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the trip.
      summary: Edit trip 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Koytendag"
                description:
                  type: string
                  example: "The best place in the world"
      responses:
        201:
          content:
            application/json:
              example:
                {
                    "title": "Tejen",
                    "description": "Tejen description",
                    "id": 3
                }
        500:
          $ref: "#/components/responses/Error500"
    delete:
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the trip.
      tags: [Trips]
      security: 
        - bearerAuth: []
      responses:
        200:
          content:
            application/json:
              example: Sucess
        404:
          $ref: "#/components/responses/Error404"
        500:
          $ref: "#/components/responses/Error500"
  /admin/trips/upload-image/{id}:
    post:
      security: 
        - bearerAuth: []
      summary: Upload image for place
      tags: [Trips]
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: Unique identifier for the trip resource.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: string
                  format: binary
                  description: Image file to upload.  
      responses:
        200:
          content:
            application/json:
              example: Sucess
        404:
          $ref: "#/components/responses/Error404"
        500:
          $ref: "#/components/responses/Error500"
  /admin/trips/image/{id}:
    delete:
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the image.
      tags: [Trips]
      security: 
        - bearerAuth: []
      summary: Delete one image
      responses:
        200:
          content:
            application/json:
              example: Sucess
        404:
          $ref: "#/components/responses/Error404"
  /admin/tips:
    get:
      tags: [Tips]
      security: 
        - bearerAuth: []
      summary: Get all tips
      responses:
        200:
          content:
            application/json:
              example: 
                  [
                    {
                        "id": 2,
                        "title": "How to get visa",
                        "description": "Go to console"
                    }
                  ]          
        401:
          $ref: "#/components/responses/Error401"
    post:
      tags: [Tips]
      security: 
        - bearerAuth: []
      summary: Add tip
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "How to get visa"
                description:
                  type: string
                  example: "Go to console"
      responses:
        201:
          content:
            application/json:
              example:
                {
                    "title": "How to get visa",
                    "description": "Go to console",
                    "id": 3
                }
        500:
          $ref: "#/components/responses/Error500"
  /admin/tips/{id}:
    get:
      security: 
        - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the tip.
      tags: [Tips]
      responses:
        200:
          content:
            application/json:
              example: 
                {
                  "id": 3,
                  "title": "Where to visit in TKM",
                  "description": "Everywhere is beatiful",
                }
        404:
          $ref: "#/components/responses/Error404"
    patch:
      tags: [Tips]
      security: 
        - bearerAuth: []
      summary: Edit tip
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the tip.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "How to get visa"
                description:
                  type: string
                  example: "Go to console"
      responses:
        200:
          content:
            application/json:
              example: "Sucess"
        500:
          $ref: "#/components/responses/Error500"
    delete:
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the tip.
      tags: [Tips]
      security: 
        - bearerAuth: []
      responses:
        200:
          content:
            application/json:
              example: Sucess
        404:
          $ref: "#/components/responses/Error404"
  /api/public/static:
    get:
      tags: [Public]
      summary: Get all static places
      responses:
        200:
          $ref: "#/components/responses/StaticPlaces200"
        401:
          $ref: "#/components/responses/Error401"
        500:
          $ref: "#/components/responses/Error500"
  /api/public/static/{id}:
    get:
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the place.
      tags: [Public]
      summary: Get one place
      responses:
        200:
          $ref: "#/components/responses/StaticPlace200"
        404:
          $ref: "#/components/responses/Error404"
  /api/public/about-us:
    get:
      tags: [Public]
      responses:
         200:
          content:
            application/json:
              example: 
                {
                  "id": 1,
                  "header": [
                    "header"
                  ],
                  "description": [
                    "description"
                  ],
                  "images": [
                    {
                      "id": 1,
                      "image": "061c6c34-9798-4350-a6ae-06ae5255e888.webp"
                    }
                  ]
                }
  /api/public/gallery:
    get:
      tags: [Public]
      summary: Get all gallery
      responses:
        200:
          content:
            application/json:
              example: 
                [
                  {
                      "id": 4,
                      "file": "0b992b88-2cf5-4902-972c-76a51535a748.webp",
                      "type": "image"
                  },
                  {
                      "id": 6,
                      "file": "9af5a7c9-7f5c-493e-b10e-6be8aeeaf8da.webp",
                      "type": "video"
                  }
                ]          
        401:
          $ref: "#/components/responses/Error401"
  /api/public/trips:
    get:
      tags: [Public]
      responses:
        200:
          content:
            application/json:
              example: 
                  [
                    {
                        "id": 3,
                        "title": "Koytendag",
                        "description": "Gowy yer"
                    }
                  ]  
  /api/public/trips/{id}:
    get:
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the trip.
      tags: [Public]
      responses:
        200:
          content:
            application/json:
              example: 
                {
                  "id": 3,
                  "title": "Koytendag",
                  "description": "Gowy yer",
                  "images": [
                      {
                          "id": 9,
                          "image": "60d90458-0b3f-4c16-b35c-3f598f6feaad.webp"
                      },
                      {
                          "id": 10,
                          "image": "e59093db-6c45-4168-8d36-8b0fde4f136e.webp"
                      }
                  ]
                }
        404:
          $ref: "#/components/responses/Error404"
        500:
          $ref: "#/components/responses/Error500"
  /api/public/tips:
    get:
      tags: [Public]
      summary: Get all tips
      responses:
        200:
          content:
            application/json:
              example: 
                  [
                    {
                        "id": 2,
                        "title": "How to get visa",
                        "description": "Go to console"
                    }
                  ]   
  /api/public/tips/{id}:
    get:
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Unique identifier for the tip.
      tags: [Public]
      responses:
        200:
          content:
            application/json:
              example: 
                {
                  "id": 3,
                  "title": "Where to visit in TKM",
                  "description": "Everywhere is beatiful",
                }
        404:
          $ref: "#/components/responses/Error404"